**Develop an IoT system to monitor gasses in the atmosphere. Upload data to ThingSpeak Cloud for efficient storage. Implement Machine Learning to predict AH and RH based on gas levels**

# Import necessary libraries import pandas as pd
from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.linear_model import LinearRegression from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error

# Load the AirQuality dataset (replace 'your_dataset.csv' with the actual file name)
# Assuming the dataset has a header row data = pd.read_csv('dataset.csv')
 
# Define features and target variables
features = ['CO(GT)', 'PT08.S1(CO)', 'NMHC(GT)', 'C6H6(GT)', 'PT08.S2(NMHC)',
'NOx(GT)', 'PT08.S3(NOx)', 'NO2(GT)', 'PT08.S4(NO2)', 'PT08.S5(O3)', 'T']

targets = ['AH', 'RH']

# Split the dataset into training and testing sets
X_train, X_test, y_train_ah, y_test_ah, y_train_rh, y_test_rh = train_test_split(
data[features], data['AH'], data['RH'], test_size=0.2, random_state=42
)

# Standardize the features (if needed) scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train) X_test_scaled = scaler.transform(X_test)

# Linear Regression for AH linear_model_ah = LinearRegression()
linear_model_ah.fit(X_train_scaled, y_train_ah) linear_predictions_ah = linear_model_ah.predict(X_test_scaled)

# Decision Tree Regression for AH decision_tree_model_ah = DecisionTreeRegressor() decision_tree_model_ah.fit(X_train, y_train_ah)
decision_tree_predictions_ah = decision_tree_model_ah.predict(X_test)

# Linear Regression for RH linear_model_rh = LinearRegression()
linear_model_rh.fit(X_train_scaled, y_train_rh) linear_predictions_rh = linear_model_rh.predict(X_test_scaled)

# Decision Tree Regression for RH decision_tree_model_rh = DecisionTreeRegressor() decision_tree_model_rh.fit(X_train, y_train_rh)
decision_tree_predictions_rh = decision_tree_model_rh.predict(X_test)

# Evaluate models for AH
linear_mse_ah = mean_squared_error(y_test_ah, linear_predictions_ah) decision_tree_mse_ah = mean_squared_error(y_test_ah, decision_tree_predictions_ah)

# Evaluate models for RH
linear_mse_rh = mean_squared_error(y_test_rh, linear_predictions_rh) decision_tree_mse_rh = mean_squared_error(y_test_rh, decision_tree_predictions_rh)
 
# Display results
print("Linear Regression Mean Squared Error for AH:", linear_mse_ah) print("Decision Tree Regression Mean Squared Error for AH:", decision_tree_mse_ah)

print("Linear Regression Mean Squared Error for RH:", linear_mse_rh) print("Decision Tree Regression Mean Squared Error for RH:", decision_tree_mse_rh)
